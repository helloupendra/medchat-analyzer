import streamlit as st  # ‚úÖ MUST BE FIRST
from dotenv import load_dotenv
import os
from openai import OpenAI

# === Load Environment Variables ===
load_dotenv()

# === Load API Key from .env or Streamlit Secrets ===
api_key = os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY")
if not api_key:
    st.error("‚ùå OPENAI_API_KEY not found. Set it in your .env or Streamlit Secrets.")
    st.stop()

# === Initialize OpenAI Client ===
client = OpenAI(api_key=api_key)

# === Report Generator Function ===
@st.cache_data(show_spinner=False)
def generate_report(conversation, report_type):
    if report_type == "patient":
        prompt = f"""
        You are a medical assistant. Given the Hindi conversation between a doctor and a patient:
        {conversation}

        Generate a report for the patient in Hindi including:
        - Doctor‚Äôs name
        - List of prescribed medicines with dosages and usage instructions
        - Any additional advice or instructions given by the doctor
        """
    elif report_type == "doctor":
        prompt = f"""
        You are a medical record assistant. Given the Hindi conversation between a doctor and a patient:
        {conversation}

        Generate a report for the doctor including:
        - Patient's symptoms and complaints
        - List of prescribed medicines with rationale
        - Duration of treatment
        - Next check-up or follow-up schedule
        """
    elif report_type == "firm":
        prompt = f"""
        You are a medical quality control agent. Analyze the Hindi conversation between a doctor and a patient:
        {conversation}

        Generate a firm-level report including:
        - Behavior of doctor and patient
        - Whether diagnosis and prescription align with symptoms
        - Was empathy and clarity maintained?
        - Mention if a next check-up or reminder is needed
        """
    elif report_type == "sentiment":
        prompt = f"""
        You are a language and sentiment expert. Analyze the emotional tone and sentiment of the following Hindi medical conversation:
        {conversation}

        Generate a sentiment report in English including:
        - Overall sentiment (Positive, Neutral, Negative)
        - Emotional tone (e.g., calm, anxious, empathetic, rude)
        - Any signs of distress or urgency
        - Politeness and clarity in communication
        """
    elif report_type == "intent":
        prompt = f"""
        You are a medical conversation analyst. Analyze the following Hindi conversation between a doctor and a patient:
        {conversation}

        Extract and provide:
        1. Important keywords (e.g., symptoms, conditions, medicines, actions)
        2. Patient's intent (e.g., consultation, prescription request, symptom explanation, follow-up)
        3. Doctor‚Äôs intent (e.g., diagnosis, reassurance, test recommendation)
        4. Brief summary of the core topic or goal of the interaction
        """
    else:
        return "Invalid report type"

    # Try GPT-4o first, fallback to GPT-3.5 silently
    for model_name in ["gpt-4o", "gpt-3.5-turbo"]:
        try:
            response = client.chat.completions.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.choices[0].message.content.strip()
        except:
            continue

    return "‚ö†Ô∏è Could not generate report at this time. Please try again later."

# === Streamlit UI ===
st.set_page_config(page_title="Hindi Medical Report Generator", layout="wide")
st.title("ü©∫ Hindi Medical Talk Analyzer")

# === Example Conversations ===
example_conversations = {
    "Example 1: Fever and Sore Throat": """
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§®‡§Æ‡§∏‡•ç‡§§‡•á, ‡§¨‡§§‡§æ‡§á‡§è ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•à?
‡§Æ‡§∞‡•Ä‡§ú: ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡§æ‡§π‡§¨, ‡§™‡§ø‡§õ‡§≤‡•á ‡§§‡•Ä‡§® ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§∏‡•á ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§π‡•à ‡§î‡§∞ ‡§ó‡§≤‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§ï‡•ç‡§Ø‡§æ ‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§Ø‡§æ ‡§ú‡•Å‡§ï‡§æ‡§Æ ‡§≠‡•Ä ‡§π‡•à?
‡§Æ‡§∞‡•Ä‡§ú: ‡§π‡§æ‡§Å, ‡§•‡•ã‡§°‡§º‡•Ä ‡§¨‡§π‡•Å‡§§ ‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§∂‡§∞‡•Ä‡§∞ ‡§Æ‡•á‡§Ç ‡§≠‡•Ä ‡§¶‡§∞‡•ç‡§¶ ‡§π‡•à‡•§
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§ï‡•ã‡§à ‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä ‡§Ø‡§æ ‡§™‡•Å‡§∞‡§æ‡§®‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§π‡•à?
‡§Æ‡§∞‡•Ä‡§ú: ‡§®‡§π‡•Ä‡§Ç, ‡§ê‡§∏‡§æ ‡§ï‡•Å‡§õ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§†‡•Ä‡§ï ‡§π‡•à, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§™‡•à‡§∞‡§æ‡§∏‡§ø‡§ü‡§æ‡§Æ‡•ã‡§≤ 500mg ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§§‡•Ä‡§® ‡§¨‡§æ‡§∞ ‡§ñ‡§æ‡§®‡•á ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§§‡§æ ‡§π‡•Ç‡§Å‡•§
""",
    "Example 2: Headache and Eye Strain": """
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§®‡§Æ‡§∏‡•ç‡§§‡•á, ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§¨ ‡§∏‡•á ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à?
‡§Æ‡§∞‡•Ä‡§ú: ‡§¶‡•ã ‡§¶‡§ø‡§® ‡§∏‡•á ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à, ‡§ñ‡§æ‡§∏‡§ï‡§∞ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§¶‡•á‡§ñ‡§®‡•á ‡§™‡§∞‡•§
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§∂‡•ç‡§Æ‡§æ ‡§™‡§π‡§®‡§§‡•á ‡§π‡•à‡§Ç?
‡§Æ‡§∞‡•Ä‡§ú: ‡§π‡§æ‡§Å, ‡§≤‡•á‡§ï‡§ø‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§Ø ‡§∏‡•á ‡§ö‡•á‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§µ‡§æ‡§Ø‡§æ‡•§
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§†‡•Ä‡§ï ‡§π‡•à, ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§è‡§ï ‡§Ü‡§Ç‡§ñ‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§µ‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§á‡§∏ ‡§¨‡•Ä‡§ö ‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§ø‡§ü‡•ç‡§∞‡§æ‡§™‡§æ‡§∞ 500mg ‡§≤‡•á‡§Ç‡•§
""",
    "Example 3: Diabetes Follow-Up": """
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§ó‡§∞ ‡§ï‡§æ ‡§≤‡•á‡§µ‡§≤ ‡§¨‡§¢‡§º‡§æ ‡§π‡•Å‡§Ü ‡§•‡§æ‡•§ ‡§ï‡•à‡§∏‡§æ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?
‡§Æ‡§∞‡•Ä‡§ú: ‡§•‡•ã‡§°‡§º‡•Ä ‡§•‡§ï‡§æ‡§® ‡§∞‡§π‡§§‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä ‡§ö‡§ï‡•ç‡§ï‡§∞ ‡§≠‡•Ä ‡§Ü‡§§‡•á ‡§π‡•à‡§Ç‡•§
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§Ü‡§™‡§®‡•á ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§≤‡•Ä ‡§π‡•à‡§Ç?
‡§Æ‡§∞‡•Ä‡§ú: ‡§π‡§æ‡§Å, ‡§≤‡•á‡§ï‡§ø‡§® ‡§°‡§æ‡§á‡§ü ‡§Æ‡•á‡§Ç ‡§•‡•ã‡§°‡§º‡•Ä ‡§≤‡§æ‡§™‡§∞‡§µ‡§æ‡§π‡•Ä ‡§π‡•ã ‡§ó‡§à ‡§•‡•Ä‡•§
‡§°‡•â‡§ï‡•ç‡§ü‡§∞: ‡§Ü‡§™‡§ï‡•ã ‡§ó‡•ç‡§≤‡•Ç‡§ï‡•ã‡§´‡•á‡§ú 500mg ‡§∏‡•Å‡§¨‡§π-‡§∂‡§æ‡§Æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è ‡§î‡§∞ ‡§°‡§æ‡§á‡§ü ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§´‡•â‡§≤‡•ã ‡§ï‡§∞‡•á‡§Ç‡•§
"""
}

# === Example selector and input area ===
example_choice = st.selectbox("üìã Choose a sample conversation or write your own:", ["-- Select an example --"] + list(example_conversations.keys()))
user_input = st.empty()

if example_choice != "-- Select an example --":
    selected_convo = example_conversations[example_choice].strip()
    conversation = user_input.text_area("Conversation", selected_convo, height=300)
else:
    conversation = user_input.text_area("Paste the Hindi conversation between doctor and patient:", height=300)

if st.button("Clear Cache"):
    st.cache_data.clear()
    st.success("‚úÖ Cache cleared. You can regenerate fresh reports now.")

if st.button("Generate Reports"):
    if conversation.strip():
        with st.spinner("Generating Patient Report..."):
            patient_report = generate_report(conversation, "patient")
        with st.spinner("Generating Doctor Report..."):
            doctor_report = generate_report(conversation, "doctor")
        with st.spinner("Generating Firm Report..."):
            firm_report = generate_report(conversation, "firm")
        with st.spinner("Generating Sentiment & Tone Report..."):
            sentiment_report = generate_report(conversation, "sentiment")
        with st.spinner("Generating Keyword & Intent Report..."):
            intent_report = generate_report(conversation, "intent")

        st.success("‚úÖ Reports Generated!")

        st.subheader("üßæ Patient Report")
        st.text_area("Patient Report", patient_report, height=100)

        st.subheader("ü©∫ Doctor Report")
        st.text_area("Doctor Report", doctor_report, height=100)

        st.subheader("üè¢ Firm Report")
        st.text_area("Firm Report", firm_report, height=100)

        st.subheader("üí¨ Sentiment & Tone Analysis")
        st.text_area("Sentiment Analysis", sentiment_report, height=100)

        st.subheader("üîç Keyword & Intent Detection")
        st.text_area("Intent & Keywords", intent_report, height=100)

        st.download_button("üì• Download Patient Report", patient_report)

    else:
        st.warning("‚ö†Ô∏è Please paste or select a conversation before generating reports.")

st.markdown("---")
st.caption("Built using OpenAI API and Streamlit | ¬©2025")